"use strict";const ImageEditor=function(selector,options){this.options={editor:{cssMaxWidth:800,cssMaxHeight:500,selectionStyle:{cornerSize:20,rotatingPointOffset:70},usageStatistics:false},upload:{maxFiles:null,uploadMultiple:false,acceptedFiles:'image/*',url:'/image/upload',autoProcessQueue:false,addRemoveLinks:true,previewsContainer:'.image-editor-preview',clickable:false,maxFilesize:20,filesizeBase:1024,thumbnailMethod:'contain',thumbnailWidth:140,maxThumbnailFilesize:20}};if(options&&options.upload){this.options.upload=Object.assign(this.options.upload,options.upload);}
this.uploadHandler=null;this.editor=null;this.initUpload=function(){this.uploadHandler=new Dropzone(selector,this.options.upload);}
this.compress=function(files,_options){return new Promise(async(resolve,reject)=>{let tasks=[];for(let i in files){tasks[i]=new Promise((_resolve,_reject)=>{let options={quality:0.8,convertSize:50,success(result){let name=files[i].name;let fileExt=name.substr(name.lastIndexOf('.'));result.oriExt=fileExt;_resolve(result);},error(err){_reject(err);}}
if(_options){options=Object.assign(options,_options);}
new Compressor(files[i],options);});}
Promise.all(tasks).then(newFiles=>{resolve(newFiles);});});}
this.resize=function(file,_options){return new Promise(async(resolve,reject)=>{let options={width:null,height:null}
if(_options){options=Object.assign(options,_options);}
let image=new Image();image.addEventListener('load',()=>{let canvas=document.createElement('canvas');let ctx=canvas.getContext('2d');canvas.width=options.width;canvas.height=options.height;ctx.drawImage(image,0,0,canvas.width,canvas.height);canvas.toBlob(blob=>{URL.revokeObjectURL(file);resolve(blob);});});image.src=URL.createObjectURL(file);});}
this.initCrop=function(selector,file,_options,callback){if(_options){this.options.editor=Object.assign(this.options.editor,_options);}
this.editor=new tui.ImageEditor(selector,this.options.editor);this.editor.loadImageFromFile(file,file.name).then(result=>{this.editor.startDrawingMode('CROPPER');const cropper=this.editor._graphics.getComponent('CROPPER');const canvas=cropper.getCanvas();const cropzone=cropper._cropzone;canvas.discardActiveObject();canvas.selection=false;canvas.remove(cropzone);let top=canvas.getHeight()*0.15;let left=canvas.getWidth()*0.15;cropzone.set({presetRatio:null,top:top,left:left,height:canvas.getHeight()-top*2,width:canvas.getWidth()-left*2});canvas.add(cropzone);canvas.selection=true;canvas.setActiveObject(cropzone);if(typeof(callback)=='function'){callback(this.editor.getCropzoneRect());}});}
this.crop=function(){return new Promise((resolve,reject)=>{this.editor.crop(this.editor.getCropzoneRect()).then(()=>{this.editor.stopDrawingMode();resolve(true);});});}
this.rotate=function(files){return new Promise(async(resolve,reject)=>{let tasks=[];for(let i in files){tasks[i]=new Promise((_resolve,_reject)=>{_rotate(files[i],files[i].deg).then(blob=>{_resolve(blob);});});}
Promise.all(tasks).then(newFiles=>{resolve(newFiles);});});}
function _rotate(img,deg){return new Promise(async(resolve,reject)=>{let image=new Image();image.addEventListener('load',()=>{let canvas=document.createElement('canvas');let ctx=canvas.getContext('2d');let width=img.width;let height=img.height;if(Math.abs(deg%180)==90){width=img.height;height=img.width;}
canvas.width=width;canvas.height=height;ctx.translate(canvas.width/2,canvas.height/2);ctx.rotate(deg*Math.PI/180);ctx.drawImage(image,-(img.width/2),-(img.height/2));canvas.toBlob(blob=>{blob.name=img.name;URL.revokeObjectURL(img);resolve(blob);});});image.src=URL.createObjectURL(img);});}
this.initEditor=function(selector,file,_options,callback){if(_options){this.options.editor=Object.assign(this.options.editor,_options);}
this.editor=new tui.ImageEditor(selector,this.options.editor);this.editor.loadImageFromFile(file,file.name).then(result=>{this.editor.stopDrawingMode();if(typeof(callback)=='function'){callback();}});}
this.initEditorUI=function(selector,file,_options){this.options.editor.includeUI={theme:blackTheme,menuBarPosition:'bottom'}
if(_options){this.options.editor=Object.assign(this.options.editor,_options);}
this.editor=new tui.ImageEditor(selector,this.options.editor);this.editor.loadImageFromFile(file).then(()=>{this.editor.ui.activeMenuEvent();});window.onresize=function(){if(this.editor&&this.editor.ui){this.editor.ui.resizeEditor();}};}};