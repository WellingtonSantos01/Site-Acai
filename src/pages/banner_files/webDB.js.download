class WebDB{constructor(dbName='user',storeName='images',dbVersion=1){this.dbName=dbName;this.dbVersion=dbVersion;this.indexedDB=window.indexedDB;this.db=null;this.store=null
this.storeName=storeName;if(!this.indexedDB){alert("Your browser doesn't support a stable version of IndexedDB. Such and such feature will not be available.");}}
open(){return new Promise((resolve,reject)=>{this.request=window.indexedDB.open(this.dbName,this.dbVersion);this.request.onerror=(e)=>{alert("Database error: "+e.target.errorCode);};this.request.onsuccess=(e)=>{this.db=e.target.result;resolve(true);};this.request.onupgradeneeded=(e)=>{return this.onupgradeneeded(e);}});}
insert(data){let objectStore=this.db.transaction(this.storeName,'readwrite').objectStore(this.storeName);objectStore.add(data);}
get(id){return new Promise((resolve,reject)=>{const objectStore=this.db.transaction(this.storeName,'readwrite').objectStore(this.storeName);const request=objectStore.get(id);request.onsuccess=function(e){let data=e.target.result;resolve(data);};});}
getAll(){return new Promise((resolve,reject)=>{this.db.transaction(this.storeName,'readwrite').objectStore(this.storeName).getAll().onsuccess=function(e){resolve(e.target.result);};});}
update(data,success,error){const objectStore=this.db.transaction(this.storeName,'readwrite').objectStore(this.storeName);const request=objectStore.put(data);request.onerror=function(e){if(typeof(success)=='function'){error(e);}};request.onsuccess=function(e){if(typeof(success)=='function'){success(e);}};}
delete(id){const request=this.db.transaction(this.storeName,'readwrite').objectStore(this.storeName).delete(id);request.onsuccess=function(e){};}
onupgradeneeded(e){this.db=e.target.result;this.store=this.db.createObjectStore(this.storeName,{keyPath:'id'});}}